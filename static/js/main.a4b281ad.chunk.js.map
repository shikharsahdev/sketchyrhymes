{"version":3,"sources":["images/header_mob.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","Home","props","headImg","React","createRef","header","blogger","thenavigation","sketchNav","rhymeNav","useState","showSketches","setShowSketches","showRhymes","setShowRhymes","posts","setPosts","useEffect","ref","once","snapshot","val","handleScroll","window","pageYOffset","current","classList","add","remove","e","addEventListener","removeListener","removeEventListener","className","onScroll","onClick","src","logo","alt","Object","keys","map","item","rhyme","sketch","FeedPost","rem","post","data","title","to","cover","caption","BlogPost","setData","match","params","id","history","goBack","undefined","images","text","split","App","path","exact","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4b281ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header_mob.216e6951.png\";","import React,{ useEffect,useState } from 'react';\nimport logo from './images/header_mob.png';\nimport './App.css';\nimport ScrollMemory from 'react-router-scroll-memory';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n\n// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport * as firebase from \"firebase/app\";\n\n// Add the Firebase services that you want to use\nimport \"firebase/database\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDbPyJdwBCo6cPwNh0j3u2RYFkuFJXHjls\",\n  authDomain: \"sketchyrhymes.firebaseapp.com\",\n  databaseURL: \"https://sketchyrhymes.firebaseio.com\",\n  projectId: \"sketchyrhymes\",\n  storageBucket: \"sketchyrhymes.appspot.com\",\n  messagingSenderId: \"127981771828\",\n  appId: \"1:127981771828:web:34e76f0d5d956b05\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nvar database = firebase.database();\n\n\n\n\n\nfunction Home(props){\n  let headImg = React.createRef();\n  let header = React.createRef();\n  let blogger = React.createRef();\n  let thenavigation = React.createRef();\n  let sketchNav = React.createRef();\n  let rhymeNav = React.createRef();\n\n  const [showSketches,setShowSketches]=useState(1);\n  const [showRhymes,setShowRhymes]=useState(1);\n  const [posts,setPosts]=useState(null);\n\n  useEffect(() => {\n    var postsRef = database.ref('/');\n    postsRef.once('value',(snapshot)=>setPosts(snapshot.val()));\n  });\n  const toggleSketches=()=>{\n    if(showSketches==1){\n      setShowSketches(0);\n      sketchNav.current.classList.remove('selectedOption');\n    }\n    else{\n      setShowSketches(1);\n      sketchNav.current.classList.add('selectedOption');\n    }\n    removeListener();\n  }\n  const toggleRhymes=()=>{\n    if(showRhymes==1){\n      setShowRhymes(0);\n      rhymeNav.current.classList.remove('selectedOption');\n    }\n    else{\n      setShowRhymes(1);\n      rhymeNav.current.classList.add('selectedOption');\n    }\n    removeListener();\n  }\n\n  const handleScroll=()=>{\n    try{\n      if(window.pageYOffset>30){\n        headImg.current.classList.add('hideHeader');\n        thenavigation.current.classList.add('navbarshow');\n        header.current.classList.add('App-with-blueBG');\n        blogger.current.classList.add('blogUp');\n      }\n      else{\n        headImg.current.classList.remove('hideHeader');\n        thenavigation.current.classList.remove('navbarshow');\n        header.current.classList.remove('App-with-blueBG');\n        blogger.current.classList.remove('blogUp');\n      }\n    }\n    catch(e){\n\n    }\n  }\n  window.addEventListener('scroll', handleScroll);\n\n  const removeListener= ()=>window.removeEventListener('scroll',handleScroll);\n\n  return (\n    <div className=\"App\" onScroll={handleScroll}>\n      <div ref={thenavigation} className=\"navbar\">\n        <b className=\"sketchy selectedOption\" ref={sketchNav} onClick={toggleSketches}>SKETCHY</b><b onClick={toggleRhymes} ref={rhymeNav} className=\"rhymes selectedOption\">RHYM.ES</b>\n      </div>\n      <div>\n        <header ref={header} className=\"App-header\">\n          <img ref={headImg} src={logo} className=\"App-logo\" alt=\"logo\" />\n          <span className=\"scrollDown\">SCROLL DOWN</span>\n        </header>\n      </div>\n      <div ref={blogger} className=\"blog\">\n      { \n        posts==null\n        ? null\n        : <div>\n            {Object.keys(posts).map(item => (posts[item].rhyme==1&&showRhymes==1 || posts[item].sketch==1&&showSketches==1)?<FeedPost rem={removeListener} item={item} post={posts[item]}/>:\"\")}\n          </div>\n      }    \n      </div>\n      \n      \n      <footer>\n        Crafted with <b>love</b> by Shikhar\n      </footer>\n    </div>\n  );\n}\nfunction App() {\n  const [post, setPost] = useState(-1);\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <ScrollMemory />\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/post/:id\" component={BlogPost} />\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nfunction FeedPost(props){\n  const data=props.post;\n  return(\n    <div className=\"blogPost\">\n      <span className=\"postType\">{data.sketch==1?\"SKETCH\":\"RHYME\"}</span>\n      <b>{data.title}</b>\n      <Link onClick={props.rem} to={`post/${props.item}`}><img src={data.cover}/></Link>\n      <p>{data.caption}</p>\n    </div>\n  );\n}\n\nfunction BlogPost(props){\n  const [data,setData]=useState(null);\n\n  \n\n  useEffect(() => {\n    var dataRef = database.ref(`/${props.match.params.id}`);\n    dataRef.once('value', (snapshot)=> setData(snapshot.val()));\n  });\n  if(data==null){\n    return null;\n  }\n  return( \n    <div className=\"blogPage\">\n      <div className=\"postTopSection\">\n        <button className=\"backButton mob\" onClick={props.history.goBack}>Go Back</button>\n        <b className=\"titleText mob\">{data.title}</b>\n        <div className=\"postImages\">\n          <img src={data.cover}/>\n          {data.images==undefined?null:data.images.map(item=><img src={item}/>)}\n        </div>\n      </div>\n      <section className=\"textContent\">\n        <button className=\"backButton nonmob\" onClick={props.history.goBack}>Go Back</button>\n        <b className=\"titleText nonmob\">{data.title}</b>\n        <p className=\"caption\">{data.caption}</p>\n        <p>\n          {data.text.split(\"\\n\").map(item=><span>{item}<br/></span>)}  \n        </p>\n      </section>\n    </div>\n  \n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}